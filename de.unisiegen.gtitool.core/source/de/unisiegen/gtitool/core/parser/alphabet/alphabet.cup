/**
 * The cup file of the alphabet parser.
 * 
 * @author Christian Fehler
 * @version $Id$
 */
import de.unisiegen.gtitool.core.entities.Alphabet;
import de.unisiegen.gtitool.core.entities.DefaultAlphabet;
import de.unisiegen.gtitool.core.entities.DefaultSymbol;
import de.unisiegen.gtitool.core.entities.Symbol;
import de.unisiegen.gtitool.core.exceptions.alphabet.AlphabetException;
import de.unisiegen.gtitool.core.exceptions.symbol.SymbolException;
import de.unisiegen.gtitool.core.parser.ParserOffset;
import de.unisiegen.gtitool.core.parser.exceptions.ErrorHandling;
import de.unisiegen.gtitool.core.parser.exceptions.ParserException;
import de.unisiegen.gtitool.core.parser.exceptions.ParserMultiException;


/************
 * Terminal *
 ************/
 
terminal String				SYMBOL;
terminal					COMMA;
terminal					LCBRACE;
terminal					RCBRACE;
terminal					LSBRACE;
terminal					RSBRACE;
terminal					MINUS;


/****************
 * Non Terminal *
 ****************/
 
non terminal Alphabet		alphabet;
non terminal Symbol			symbol;
non terminal Symbol[]		symbol_list_comma;
non terminal Symbol[]		class;


/*********
 * Error *
 *********/

non terminal 				epsilon;
non terminal				alphabet_error;
non terminal				symbol_list_comma_error;


/************
 * Alphabet *
 ************/

alphabet						::= LCBRACE:l symbol_list_comma:slc RCBRACE:r
									{:
									   try
									   {
									     RESULT = new DefaultAlphabet(slc);
									   }
									   catch (AlphabetException ecx)
									   {
									     ParserMultiException.throwAlphabetException(ecx.getSymbol());
									   }
									   RESULT.setParserOffset(new ParserOffset(lleft,rright));
									:}
								|	symbol_list_comma:slc
									{:
									   try
									   {
									     RESULT = new DefaultAlphabet(slc);
									   }
									   catch (AlphabetException ecx)
									   {
									     ParserMultiException.throwAlphabetException(ecx.getSymbol());
									   }
									   RESULT.setParserOffset(new ParserOffset(slcleft,slcright));
									:}
								|	alphabet_error
									{: :}
								;

alphabet_error					::= LCBRACE:l epsilon
									{:
									   ErrorHandling.expect ( "Alphabet", "s}", lleft, lright, "s_1" , "," , " " , "..." , " " , "," , " " , "s_n" , "}" );
									:}
								|	LCBRACE:l symbol_list_comma:slc epsilon
									{:
									   ErrorHandling.expect ( "Alphabet", "}", lleft, slcright, "}" );
									:}
								|	LCBRACE:l symbol_list_comma:slc COMMA:c epsilon
									{:
									   ErrorHandling.expect ( "Alphabet", " s}", lleft, cright, "s_i" , "," , " " , "..." , " " , "," , " " , "s_n" , "}" );
									:}
								/* one missing token - comma */
								|	LCBRACE:l symbol_list_comma:slc SYMBOL:s
									{:
									   ErrorHandling.expect ( "Alphabet", ", ", lleft, slcright, "," );
									:}
								/* one missing token - symbol */
								|	LCBRACE:l COMMA:c
									{:
									   ErrorHandling.expect ( "Alphabet", "s", lleft, lright, "s" );
									:}
								/* one missing token - symbol */
								|	LCBRACE:l RCBRACE:r
									{:
									   ErrorHandling.expect ( "Alphabet", "s", lleft, lright, "s" );
									:}
								;

symbol							::= SYMBOL:s
									{:
									   RESULT = new DefaultSymbol(s);
									   RESULT.setParserOffset(new ParserOffset(sleft,sright));
									:}
								;

symbol_list_comma				::= symbol_list_comma:slc COMMA:c symbol:s
								    {:
								       RESULT = new Symbol[slc.length + 1];
									   System.arraycopy(slc, 0, RESULT, 0, slc.length);
									   RESULT[slc.length] = s;
								    :}
								|	symbol_list_comma:slc COMMA:c class:cl
								    {:
								       RESULT = new Symbol[slc.length + cl.length];
								       System.arraycopy(slc, 0, RESULT, 0, slc.length);
        							   System.arraycopy(cl, 0, RESULT, slc.length, cl.length);
								    :}
								|	symbol:s
									{:
									   RESULT = new Symbol[] { s };
									:}
								|	class:c
									{:
										RESULT = c;
									:}
								|	symbol_list_comma_error
									{: :}
								;
								
class							::= LSBRACE:l symbol:s1 MINUS symbol:s2 RSBRACE:r
									{:
									    char c1 = s1.getName ().charAt ( 0 );
    									char c2 = s2.getName ().charAt ( 0 );
    									if(c1 > c2){
											ParserException.throwCharacterClassException(
												c1, c2, lleft, rright);
    									}
    									int c = c2 - c1 + 1;
    									RESULT = new Symbol[c];
    									 
    									int i = 0;
									    while ( c1 <= c2 )
    									{
      										RESULT[i++] = new DefaultSymbol ( Character.toString ( c1++ ) );
    									}
									:}								
								;
symbol_list_comma_error			::= symbol_list_comma:slc COMMA:c epsilon
									{:
									   ErrorHandling.expect ( "Alphabet", " s", slcleft, cright, "s_i" , "," , " " , "..." , " " , "," , " " , "s_n" );
									:}
								/* one missing token - comma */
								|	symbol_list_comma:slc SYMBOL:s
									{:
									   ErrorHandling.expect ( "Alphabet", ", ", slcleft, slcright, "," );
									:}
								;

epsilon							::= /* epsilon */
									{: :}
								;