/**
 * The cup file of the alphabet parser.
 * 
 * @author Christian Fehler
 * @version $Id$
 */
import de.unisiegen.gtitool.core.entities.Alphabet;
import de.unisiegen.gtitool.core.entities.DefaultAlphabet;
import de.unisiegen.gtitool.core.entities.DefaultSymbol;
import de.unisiegen.gtitool.core.entities.Symbol;
import de.unisiegen.gtitool.core.exceptions.alphabet.AlphabetException;
import de.unisiegen.gtitool.core.exceptions.symbol.SymbolException;
import de.unisiegen.gtitool.core.parser.ParserOffset;
import de.unisiegen.gtitool.core.parser.exceptions.ErrorHandling;
import de.unisiegen.gtitool.core.parser.exceptions.ParserException;
import de.unisiegen.gtitool.core.parser.exceptions.ParserMultiException;


/************
 * Terminal *
 ************/
 
terminal String				SYMBOL;
terminal					COMMA;
terminal					LCBRACE;
terminal					RCBRACE;


/****************
 * Non Terminal *
 ****************/
 
non terminal Alphabet		alphabet;
non terminal Symbol			symbol;
non terminal Symbol[]		symbol_list;


/*********
 * Error *
 *********/

non terminal 				epsilon;
non terminal				alphabet_error;
non terminal				symbol_list_error;


/************
 * Alphabet *
 ************/

alphabet						::= LCBRACE:l symbol_list:sl RCBRACE:r
									{:
									   try
									   {
									     RESULT = new DefaultAlphabet(sl);
									   }
									   catch (AlphabetException ecx)
									   {
									     ParserMultiException.throwAlphabetException(ecx.getSymbol());
									   }
									   RESULT.setParserOffset(new ParserOffset(slleft,slright));
									:}
								|	symbol_list:sl
									{:
									   try
									   {
									     RESULT = new DefaultAlphabet(sl);
									   }
									   catch (AlphabetException ecx)
									   {
									     ParserMultiException.throwAlphabetException(ecx.getSymbol());
									   }
									   RESULT.setParserOffset(new ParserOffset(slleft,slright));
									:}
								|	alphabet_error
									{: :}
								;

alphabet_error					::= LCBRACE:l epsilon
									{:
									   ErrorHandling.expect ( "Alphabet", "s}", lleft, lright, "s_1" , "," , " " , "..." , " " , "," , " " , "s_n" , "}" );
									:}
								|	LCBRACE:l symbol_list:sl epsilon
									{:
									   ErrorHandling.expect ( "Alphabet", "}", lleft, slright, "}" );
									:}
								|	LCBRACE:l symbol_list:sl COMMA:c epsilon
									{:
									   ErrorHandling.expect ( "Alphabet", " s}", lleft, cright, "s_i" , "," , " " , "..." , " " , "," , " " , "s_n" , "}" );
									:}
								/* one missing token */
								|	LCBRACE:l symbol_list:sl SYMBOL:s
									{:
									   ErrorHandling.expect ( "Alphabet", ", ", lleft, slright, "," );
									:}
								|	LCBRACE:l COMMA:c
									{:
									   ErrorHandling.expect ( "Alphabet", "s", lleft, lright, "s" );
									:}
								|	LCBRACE:l RCBRACE:r
									{:
									   ErrorHandling.expect ( "Alphabet", "s", lleft, lright, "s" );
									:}
								;

symbol							::= SYMBOL:s
									{:
									   try
									   {
									     RESULT = new DefaultSymbol(s);
									   }
									   catch (SymbolException exc)
									   {
									     ParserException.throwSymbolException(sleft, sright, s);
									   }
									   RESULT.setParserOffset(new ParserOffset(sleft,sright));
									:}
								;

symbol_list						::= symbol_list:sl COMMA:c symbol:s
								    {:
								       RESULT = new Symbol[sl.length + 1];
									   System.arraycopy(sl, 0, RESULT, 0, sl.length);
									   RESULT[sl.length] = s;
								    :}
								|	symbol:s
									{:
									   RESULT = new Symbol[] { s };
									:}
								|	symbol_list_error
									{: :}
								;

symbol_list_error				::= symbol_list:sl COMMA:c epsilon
									{:
									   ErrorHandling.expect ( "Alphabet", " s", slleft, cright, "s_i" , "," , " " , "..." , " " , "," , " " , "s_n" );
									:}
								/* one missing token */
								|	symbol_list:sl SYMBOL:s
									{:
									   ErrorHandling.expect ( "Alphabet", ", ", slleft, slright, "," );
									:}
								;

epsilon							::= /* epsilon */
									{: :}
								;