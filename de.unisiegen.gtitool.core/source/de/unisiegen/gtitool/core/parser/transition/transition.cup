/**
 * The cup file of the transition parser.
 * 
 * @author Christian Fehler
 * @version $Id$
 */
import de.unisiegen.gtitool.core.entities.DefaultSymbol;
import de.unisiegen.gtitool.core.entities.DefaultTransition;
import de.unisiegen.gtitool.core.entities.DefaultWord;
import de.unisiegen.gtitool.core.entities.Symbol;
import de.unisiegen.gtitool.core.entities.Transition;
import de.unisiegen.gtitool.core.entities.Word;
import de.unisiegen.gtitool.core.exceptions.symbol.SymbolException;
import de.unisiegen.gtitool.core.exceptions.transition.TransitionException;
import de.unisiegen.gtitool.core.parser.ParserOffset;
import de.unisiegen.gtitool.core.parser.exceptions.ErrorHandling;
import de.unisiegen.gtitool.core.parser.exceptions.ParserException;
import de.unisiegen.gtitool.core.parser.exceptions.ParserMultiException;


/************
 * Terminal *
 ************/
 
terminal String				SYMBOL;
terminal					COMMA;
terminal					LCBRACE;
terminal					RCBRACE;
terminal					EPSILON;
terminal					ARROWUP;
terminal					ARROWDOWN;


/****************
 * Non Terminal *
 ****************/
 
non terminal Transition		transition;
non terminal Symbol			symbol;
non terminal Symbol[]		symbol_list;
non terminal Symbol[]		symbol_list_comma;
non terminal Word			word;
non terminal Word			word_read;
non terminal Word			word_write;


/*********
 * Error *
 *********/

non terminal 				epsilon;
non terminal				symbol_list_error;
non terminal				symbol_list_comma_error;


/**************
 * Transition *
 **************/

transition						::= EPSILON:e
									{:
									   RESULT = new DefaultTransition();
									   RESULT.setParserOffset(new ParserOffset(eleft,eright));
									:}
								|	EPSILON:e word_read:r word_write:w
									{:
									   RESULT = new DefaultTransition(r, w);
									   RESULT.setParserOffset(new ParserOffset(eleft,wright));
									:}
								|	LCBRACE:l symbol_list_comma:slc RCBRACE:r
									{:
									   try
									   {
									     RESULT = new DefaultTransition(new DefaultWord(), new DefaultWord(), slc);
									   }
									   catch (TransitionException ecx)
									   {
									     ParserMultiException.throwTransitionException(ecx.getSymbol());
									   }
									   RESULT.setParserOffset(new ParserOffset(lleft,rright));
									:}
								|	LCBRACE:l symbol_list_comma:slc RCBRACE word_read:r word_write:w
									{:
									   try
									   {
									     RESULT = new DefaultTransition(r, w, slc);
									   }
									   catch (TransitionException ecx)
									   {
									     ParserMultiException.throwTransitionException(ecx.getSymbol());
									   }
									   RESULT.setParserOffset(new ParserOffset(lleft,wright));
									:}
								|	symbol_list_comma:slc
									{:
									   try
									   {
									     RESULT = new DefaultTransition(new DefaultWord(), new DefaultWord(), slc);
									   }
									   catch (TransitionException ecx)
									   {
									     ParserMultiException.throwTransitionException(ecx.getSymbol());
									   }
									   RESULT.setParserOffset(new ParserOffset(slcleft,slcright));
									:}
								|	symbol_list_comma:slc word_read:r word_write:w
									{:
									   try
									   {
									     RESULT = new DefaultTransition(r, w, slc);
									   }
									   catch (TransitionException ecx)
									   {
									     ParserMultiException.throwTransitionException(ecx.getSymbol());
									   }
									   RESULT.setParserOffset(new ParserOffset(slcleft,wright));
									:}
								;

word_read						::= word:w ARROWUP
									{:
									   RESULT = w;
									:}
								|	EPSILON:e ARROWUP
									{:
									   RESULT = new DefaultWord();
									   RESULT.setParserOffset(new ParserOffset(eleft,eright));
									:}
								;

word_write						::= word:w ARROWDOWN
									{:
									   RESULT = w;
									:}
								|	EPSILON:e ARROWDOWN
									{:
									   RESULT = new DefaultWord();
									   RESULT.setParserOffset(new ParserOffset(eleft,eright));
									:}
								;

symbol							::= SYMBOL:s
									{:
									   RESULT = new DefaultSymbol(s);
									   RESULT.setParserOffset(new ParserOffset(sleft,sright));
									:}
								|	EPSILON:e
									{:
									   RESULT = new DefaultSymbol();
									   RESULT.setParserOffset(new ParserOffset(eleft,eright));
									:}
								;

symbol_list						::= symbol_list:sl symbol:s
								    {:
								       RESULT = new Symbol[sl.length + 1];
									   System.arraycopy(sl, 0, RESULT, 0, sl.length);
									   RESULT[sl.length] = s;
								    :}
								|	symbol:s
									{:
									   RESULT = new Symbol[] { s };
									:}
								;

word							::= symbol_list:sl
									{:
									   RESULT = new DefaultWord(sl);
									   RESULT.setParserOffset(new ParserOffset(slleft,slright));
									:}
								|	epsilon:e
									{:
									   RESULT = new DefaultWord();
									   RESULT.setParserOffset(new ParserOffset(eleft,eright));
									:}
								;

symbol_list_comma				::= symbol_list_comma:slc COMMA:c symbol:s
								    {:
								       RESULT = new Symbol[slc.length + 1];
									   System.arraycopy(slc, 0, RESULT, 0, slc.length);
									   RESULT[slc.length] = s;
								    :}
								|	symbol:s
									{:
									   RESULT = new Symbol[] { s };
									:}
								|	symbol_list_comma_error
									{: :}
								;

symbol_list_comma_error			::= symbol_list_comma:slc COMMA:c epsilon
									{:
									   ErrorHandling.expect ( "Alphabet", " s", slcleft, cright, "s_i" , "," , " " , "..." , " " , "," , " " , "s_n" );
									:}
								/* one missing token - comma */
								|	symbol_list_comma:slc SYMBOL:s
									{:
									   ErrorHandling.expect ( "Alphabet", ", ", slcleft, slcright, "," );
									:}
								;

epsilon							::= /* epsilon */
									{: :}
								;